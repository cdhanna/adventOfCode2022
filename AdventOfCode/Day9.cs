using System.Diagnostics;

namespace AdventOfCode;

public class Day9
{
    [DebuggerDisplay("{steps}x({dir.x},{dir.y})")]
    public struct Instruction
    {
        public Vec dir;
        public int steps;
    }
    
    [TestCase(sample, 13)]
    [TestCase(input, 5930)]
    public void Part(string input, int expected)
    {
        var lines = input.Split("\n", StringSplitOptions.RemoveEmptyEntries);
        var instructions = new List<Instruction>();
        foreach (var line in lines)
        {
            var dir = line[0] switch
            {
                'U' => Vec.Up,
                'D' => Vec.Down,
                'R' => Vec.Right,
                'L' => Vec.Left
            };
            var count = int.Parse(line.Substring(2));
            instructions.Add(new Instruction{steps = count, dir = dir});
        }

        var head = Vec.Zero;
        var tail = Vec.Zero;

        var uniqueSpots = new HashSet<string>();

        foreach (var ins in instructions)
        {
            for (var i = 0; i < ins.steps; i++)
            {
                head += ins.dir;
                // simulate the tail position... 

                var delta = head - tail;

                var absX = Math.Abs(delta.x);
                var absY = Math.Abs(delta.y);
                // these are all cases where we are next to the head, and don't need to move.
                if (absX == 0 && absY == 1) continue;
                if (absX == 1 && absY == 0) continue;
                if (absX == 1 && absY == 1) continue; 

                var unit = new Vec
                {
                    x = Math.Sign(delta.x),
                    y = Math.Sign(delta.y),
                };
                tail += unit;
                uniqueSpots.Add($"{tail.x},{tail.y}");
                // if (delta.x == 0)
                // {
                //     // same column
                // } else if (delta.y == 0)
                // {
                //     
                // }
            }
        }

        var spots = uniqueSpots.Count + 1;
        Assert.AreEqual(expected, spots);
    }
    
    
    [TestCase(sample, 1)]
    [TestCase(sample2, 36)]
    [TestCase(input, 2443)]
    public void Par2(string input, int expected)
    {
        var lines = input.Split("\n", StringSplitOptions.RemoveEmptyEntries);
        var instructions = new List<Instruction>();
        foreach (var line in lines)
        {
            var dir = line[0] switch
            {
                'U' => Vec.Up,
                'D' => Vec.Down,
                'R' => Vec.Right,
                'L' => Vec.Left
            };
            var count = int.Parse(line.Substring(2));
            instructions.Add(new Instruction{steps = count, dir = dir});
        }

        var rope = new Vec[10];
        for (var i = 0; i < rope.Length; i++)
        {
            rope[i] = Vec.Zero;
        }
        var uniqueSpots = new HashSet<string>();

        foreach (var ins in instructions)
        {
            for (var i = 0; i < ins.steps; i++)
            {
                rope[0] += ins.dir;
                // simulate the tail position... 
                for (var r = 1; r < rope.Length; r++)
                {
                    var delta = rope[r-1] - rope[r];

                    var absX = Math.Abs(delta.x);
                    var absY = Math.Abs(delta.y);
                    // these are all cases where we are next to the head, and don't need to move.
                    if (absX == 0 && absY == 1) continue;
                    if (absX == 1 && absY == 0) continue;
                    if (absX == 1 && absY == 1) continue;

                    var unit = new Vec
                    {
                        x = Math.Sign(delta.x),
                        y = Math.Sign(delta.y),
                    };
                    rope[r] += unit;
                }
                uniqueSpots.Add($"{rope[^1].x},{rope[^1].y}");
            }
        }

        var spots = uniqueSpots.Count;
        Assert.AreEqual(expected, spots);
    }

    #region sample
    public const string sample = @"R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2";

    public const string sample2 = @"R 5
U 8
L 8
D 3
R 17
D 10
L 25
U 20";
    #endregion
    
    #region input
    public const string input = @"D 2
R 2
D 1
U 1
L 2
U 2
D 1
R 2
U 2
R 2
L 1
D 2
L 1
U 1
R 1
D 1
U 1
R 1
U 1
R 1
D 2
L 1
D 1
L 1
D 1
U 1
L 1
R 1
L 2
D 1
L 2
R 1
U 2
L 2
D 1
U 2
D 1
L 1
U 2
L 2
U 2
D 2
U 2
D 2
L 1
D 2
L 2
D 2
U 2
L 2
R 2
U 1
L 1
D 2
R 1
D 2
L 2
R 1
D 2
R 1
U 2
L 2
U 2
D 1
U 2
L 2
U 2
L 1
U 2
L 1
U 2
D 1
U 1
D 2
R 2
L 1
U 2
L 1
D 1
R 2
U 1
L 1
U 1
R 2
U 2
D 2
L 2
U 2
L 2
R 1
L 2
U 1
R 1
L 1
R 2
U 1
R 1
D 1
L 2
R 2
L 2
R 1
D 2
R 1
U 2
L 2
D 1
R 2
D 2
L 2
U 2
D 2
L 1
D 2
R 1
L 3
D 2
R 1
L 3
R 2
D 3
U 3
R 2
L 1
R 2
U 2
R 2
L 1
U 2
D 1
L 3
U 3
R 3
D 2
U 1
L 2
R 2
D 1
L 2
U 3
R 1
L 3
R 1
L 3
U 3
D 3
U 2
R 2
L 3
U 2
L 2
U 2
R 2
D 1
R 3
L 2
R 3
D 2
R 2
L 2
R 3
L 2
R 1
U 2
D 1
R 1
D 2
U 2
L 2
D 1
R 1
L 3
U 1
R 3
L 2
D 1
U 1
L 2
U 1
D 2
R 1
U 2
D 3
R 3
L 2
R 2
U 2
L 3
U 3
L 3
R 2
U 1
D 1
U 2
R 3
D 3
L 1
D 2
U 1
D 2
R 3
U 2
D 1
L 1
D 3
R 1
L 1
U 2
L 3
D 1
U 2
R 1
D 1
R 3
D 1
R 1
L 1
R 2
L 1
D 1
R 2
U 1
L 4
U 2
D 2
L 4
R 1
L 3
D 3
R 3
L 4
D 1
R 1
U 4
L 1
D 3
R 4
U 3
L 3
U 4
D 3
L 2
D 2
R 1
D 3
U 1
R 4
U 2
D 1
L 4
U 4
L 1
U 1
L 3
D 2
L 2
R 3
U 3
D 3
U 2
R 3
D 2
L 1
U 2
D 3
R 1
D 2
U 4
R 4
U 3
R 3
L 1
U 4
R 4
L 1
R 4
L 4
R 1
L 1
R 3
U 2
R 3
L 3
D 2
R 1
D 2
U 2
R 4
U 2
R 4
L 1
R 3
U 4
L 3
R 2
U 1
R 2
D 4
L 1
U 4
R 2
L 3
U 2
L 3
U 1
D 1
L 4
U 2
L 2
U 4
D 2
U 3
R 4
L 1
D 1
R 2
D 4
U 3
R 1
L 2
R 4
D 4
L 3
D 1
R 2
L 3
U 1
L 2
D 3
L 2
R 1
L 2
R 2
L 4
U 1
L 5
R 2
D 5
L 4
R 2
D 3
L 5
U 4
R 5
L 1
D 4
R 2
D 4
U 3
R 1
D 1
U 5
R 2
D 2
R 5
D 3
L 1
D 4
R 2
L 5
U 4
R 1
D 1
U 1
R 1
D 3
U 1
L 4
U 2
D 2
R 1
U 2
L 3
R 5
D 1
L 4
R 4
D 5
L 5
D 5
U 1
L 2
D 3
L 3
D 1
U 2
D 3
U 1
L 3
R 1
D 2
U 4
R 4
D 2
U 1
L 1
R 1
U 1
R 4
D 4
L 2
U 4
D 1
R 4
L 2
U 3
D 4
R 2
U 1
R 2
U 5
D 2
U 4
L 2
R 2
L 1
U 2
R 5
U 5
R 3
L 2
R 4
L 3
R 3
L 2
U 4
L 2
U 2
D 3
U 3
L 3
R 2
U 2
D 5
U 4
R 3
L 5
R 1
U 4
L 4
U 4
D 1
U 2
D 4
R 4
U 5
R 2
L 2
R 2
L 3
R 1
D 5
R 5
L 4
U 2
D 6
U 3
R 6
L 1
D 3
U 2
R 1
D 3
L 6
R 5
L 6
U 5
R 4
D 1
U 2
R 3
U 1
R 6
D 1
L 4
R 2
L 1
U 6
L 1
U 3
R 3
U 4
D 5
R 2
U 2
D 3
R 1
U 5
D 2
L 3
U 3
D 2
U 4
D 4
R 3
L 3
R 3
D 1
R 2
L 4
D 2
L 5
U 5
D 2
L 5
U 1
L 2
U 2
L 5
R 1
L 2
U 2
R 3
U 5
R 1
L 2
R 3
D 3
R 3
L 6
D 1
L 2
R 1
U 4
D 3
R 6
L 4
U 2
L 3
D 4
L 3
D 5
L 3
D 4
U 3
D 4
U 2
D 6
U 4
R 2
L 2
R 1
L 4
R 6
D 5
L 2
D 6
L 4
R 4
U 6
L 6
D 6
R 4
L 2
R 2
U 5
L 6
D 7
U 6
R 1
D 4
R 2
D 7
L 4
U 7
D 4
L 6
D 7
U 6
R 1
U 1
R 4
L 7
U 1
D 2
U 2
R 3
L 6
R 7
L 5
D 5
U 2
D 1
U 4
R 6
D 5
R 6
U 5
R 7
U 7
R 4
L 1
D 1
U 3
D 1
L 5
U 4
R 2
L 3
D 3
U 2
R 2
D 1
R 6
U 5
D 5
R 7
U 2
L 4
D 3
R 2
L 1
D 1
R 2
D 7
U 6
D 1
R 2
D 7
U 5
R 6
D 1
L 5
U 3
L 6
D 3
L 5
D 2
L 5
R 1
D 7
L 3
U 3
R 6
D 4
R 2
U 1
L 2
R 1
L 3
D 3
L 6
U 7
R 4
L 4
U 5
L 7
D 1
R 4
U 6
D 3
R 2
L 1
D 4
R 5
D 3
L 6
R 6
U 4
R 7
D 2
U 3
L 2
D 3
L 5
D 1
U 5
D 8
L 8
U 2
L 8
U 2
D 3
U 1
L 1
R 3
D 5
U 1
D 6
R 6
L 6
D 3
R 3
D 8
R 3
U 8
L 5
U 8
R 4
L 3
U 6
D 5
R 6
D 5
U 2
D 1
L 4
D 5
U 5
R 3
L 4
U 5
D 2
R 4
U 3
R 7
D 2
R 8
L 4
R 6
D 6
U 3
R 6
L 2
R 5
L 2
D 1
U 6
R 7
D 1
L 7
R 8
D 6
U 2
R 5
U 4
L 6
R 5
U 3
R 7
D 3
U 1
R 1
L 2
U 4
L 4
R 5
D 2
U 8
D 4
R 6
L 1
R 3
U 3
L 7
D 8
U 8
D 3
U 2
R 1
D 6
R 5
L 8
U 7
L 8
D 7
U 5
L 6
U 3
R 3
U 8
D 1
U 3
D 6
R 7
U 6
R 4
U 7
L 8
D 4
L 5
R 3
L 1
D 1
R 6
L 4
D 8
R 1
L 6
D 8
L 2
U 6
D 9
L 4
R 6
D 8
U 4
D 5
L 2
R 9
L 3
D 1
R 4
L 8
R 7
U 9
R 1
D 7
R 5
L 4
R 3
L 5
U 4
R 9
U 7
D 8
L 5
U 7
R 2
D 1
U 6
R 1
L 5
D 3
U 3
L 1
D 5
R 3
L 8
D 7
U 3
D 7
R 2
U 3
R 1
D 1
R 3
L 1
D 3
L 3
R 3
D 3
L 9
U 6
L 6
R 6
U 2
R 1
L 6
D 4
R 2
U 9
R 1
L 3
R 7
U 6
R 8
U 6
R 1
U 5
D 5
R 6
L 6
U 5
L 1
D 4
U 3
D 5
R 1
U 9
D 1
R 1
L 7
R 7
L 5
R 1
U 6
R 4
D 8
R 2
L 2
D 1
U 1
R 7
D 6
L 1
R 8
U 2
R 4
U 8
R 1
D 2
U 3
R 5
U 8
R 1
L 6
U 4
L 4
R 1
D 1
L 3
R 8
L 2
D 9
U 4
L 3
U 9
L 9
D 6
U 8
R 3
L 2
U 4
L 1
D 8
L 8
R 5
L 1
U 3
L 6
D 5
U 9
D 4
U 2
D 2
U 1
R 6
D 1
R 1
D 8
L 3
D 10
R 5
D 6
L 1
U 4
D 6
R 6
U 4
L 10
D 1
L 3
R 9
U 5
L 5
R 1
U 7
R 6
L 10
R 1
U 10
D 3
R 1
L 1
R 7
U 4
R 3
U 7
R 2
D 4
R 2
L 2
R 9
L 8
U 10
L 9
D 4
L 2
D 9
L 10
D 2
U 5
L 7
R 1
D 1
L 5
D 8
L 3
R 4
D 5
R 4
U 4
L 8
D 9
L 10
R 5
L 5
R 8
D 5
L 3
R 2
L 2
R 1
L 5
U 7
D 7
L 10
D 1
L 9
D 7
R 1
U 7
R 10
L 7
U 8
D 8
L 9
R 9
D 3
L 1
D 6
U 11
D 5
U 5
L 6
R 1
U 11
D 3
U 7
L 7
R 9
L 1
R 6
L 2
U 6
D 7
L 8
U 10
R 2
D 9
L 11
R 7
L 3
U 7
D 3
R 1
D 6
L 5
D 4
R 7
L 8
U 11
L 10
D 2
L 3
R 4
D 1
R 6
L 1
R 7
L 3
R 4
U 5
L 4
U 8
D 2
R 3
U 7
R 8
L 2
R 5
U 9
R 1
U 2
R 8
L 4
R 1
L 10
U 6
L 3
R 7
U 1
L 8
U 2
D 1
L 5
R 11
U 5
L 7
U 6
L 7
U 4
D 10
R 11
L 2
R 8
D 1
R 8
D 1
U 6
L 7
R 6
U 3
R 8
D 10
L 8
D 3
R 1
U 5
L 3
U 7
R 7
D 10
L 7
U 11
L 9
D 2
L 6
R 6
L 6
U 11
D 4
L 10
R 11
D 11
L 1
D 1
U 7
R 10
U 3
L 5
R 9
U 1
L 12
U 9
R 8
L 12
U 9
L 11
R 11
D 11
R 12
L 9
D 2
U 9
L 1
R 5
D 2
U 10
R 2
U 9
D 6
R 4
L 3
U 4
L 4
D 8
U 9
R 3
D 7
L 11
U 11
D 5
R 4
L 5
D 11
U 8
L 5
D 2
L 5
D 1
R 9
L 1
U 1
D 11
R 2
D 10
L 6
D 8
U 12
D 9
L 3
R 2
U 3
D 2
L 6
D 7
U 1
L 4
U 10
D 12
R 9
D 7
U 6
L 8
D 5
R 4
U 6
L 4
R 5
D 4
U 3
L 10
D 7
U 1
L 2
R 8
U 10
L 11
R 9
D 5
U 10
L 10
R 10
L 5
R 3
D 12
U 11
R 1
U 2
L 6
D 9
U 5
L 10
D 9
R 9
D 10
L 12
R 3
D 3
L 7
D 4
U 5
L 2
D 1
R 11
U 8
L 7
D 10
L 5
U 8
R 4
D 12
L 10
U 1
R 11
D 4
L 12
D 7
R 1
D 12
U 3
R 2
D 3
U 9
D 9
R 2
D 3
L 12
D 10
U 3
R 8
L 9
R 6
L 11
R 3
L 7
R 10
D 3
R 2
D 3
U 8
L 7
U 2
D 4
R 6
U 8
R 4
L 5
U 6
D 1
U 1
R 4
D 5
U 3
D 13
U 4
D 8
U 3
L 12
U 7
D 7
L 2
R 13
L 11
U 8
L 7
R 11
U 13
L 5
R 10
D 2
R 5
D 11
R 8
U 9
D 13
R 4
L 4
D 1
R 6
L 4
U 4
D 5
L 13
D 10
R 10
D 1
U 8
D 8
L 9
U 12
R 9
L 10
R 1
U 12
L 3
D 10
L 9
R 12
D 3
U 1
D 13
L 6
D 13
L 13
D 12
L 7
R 2
U 7
D 7
R 7
U 12
R 6
D 3
R 12
L 13
D 12
U 6
D 1
R 2
U 6
L 12
R 7
D 2
U 13
D 2
U 8
R 10
D 13
L 1
R 10
D 6
U 8
R 13
U 4
R 2
L 1
D 5
R 6
U 13
R 3
L 4
D 14
L 8
D 11
U 13
D 7
L 1
U 2
L 13
R 9
L 10
R 8
L 4
U 12
D 9
U 8
D 3
U 14
D 1
L 7
R 1
D 1
R 3
L 10
R 6
L 6
D 14
U 9
D 9
R 11
D 14
L 4
R 9
L 4
D 1
U 7
D 14
U 14
L 2
D 1
L 14
D 11
R 9
L 11
D 2
R 8
L 2
R 2
U 13
D 1
L 4
U 6
D 6
R 1
D 10
R 9
L 9
R 1
D 13
U 4
L 7
D 7
R 2
L 2
U 11
R 8
U 10
D 9
R 6
U 8
D 9
U 3
R 2
D 8
U 4
R 7
L 10
R 3
U 7
D 10
R 4
U 6
L 9
D 13
L 6
U 11
D 12
U 10
L 14
U 9
D 3
L 6
R 5
U 2
R 15
D 1
R 8
D 3
U 10
D 5
U 3
R 6
D 8
U 15
L 13
D 6
L 13
U 5
D 5
L 6
D 7
U 12
L 14
D 14
U 14
R 6
U 9
R 9
L 15
U 6
R 8
U 6
D 6
L 3
D 10
L 9
D 11
L 12
D 9
U 12
D 6
L 10
R 6
L 10
U 9
D 4
R 3
D 13
R 6
D 6
U 8
D 2
L 2
R 12
D 4
L 14
U 4
L 9
U 10
R 13
D 13
L 9
D 3
U 15
D 14
L 7
U 2
D 5
L 14
U 14
D 4
L 12
U 4
R 3
U 7
D 5
U 8
D 6
R 6
D 13
L 6
R 6
U 8
L 6
U 6
D 7
U 7
R 5
U 15
D 11
L 12
R 4
L 9
U 14
R 6
L 2
U 5
L 5
U 6
L 5
U 9
R 11
D 11
L 2
U 12
L 6
D 6
U 5
L 7
U 3
L 10
D 12
R 16
L 8
U 7
D 11
U 5
R 5
D 10
R 11
D 15
U 8
D 14
U 16
R 7
D 9
U 9
D 14
U 4
D 11
U 5
R 7
D 11
R 4
U 4
R 11
D 3
U 9
D 11
R 13
U 9
D 2
L 6
D 12
R 16
L 7
U 13
R 14
L 7
U 11
R 14
L 11
D 14
R 2
L 14
U 12
D 4
L 2
D 8
L 5
D 7
U 3
R 10
D 12
R 4
L 16
U 1
R 9
U 14
L 15
D 3
L 5
U 10
L 6
U 9
D 10
R 3
L 13
R 8
D 6
R 9
U 14
L 14
D 8
R 7
D 4
U 1
L 4
U 13
R 12
L 2
D 1
U 2
R 5
L 13
D 12
R 10
L 1
D 3
L 4
R 1
D 1
R 12
L 3
U 4
L 12
R 14
L 7
R 7
D 12
U 1
D 15
U 6
R 2
U 6
R 8
L 3
U 8
D 5
R 11
U 12
R 14
U 8
R 14
U 4
R 15
D 17
U 8
L 7
U 2
L 10
D 11
U 12
R 10
L 11
U 2
L 10
D 11
L 3
R 12
D 5
U 3
L 12
D 12
L 2
U 2
R 14
U 2
D 5
R 6
L 14
D 8
R 10
D 14
L 14
U 5
D 8
L 1
U 3
D 8
L 4
U 4
R 16
D 2
L 14
R 10
L 13
D 8
U 12
L 4
R 14
L 16
D 12
L 15
R 8
U 2
D 8
L 14
U 5
D 7
U 17
L 10
R 8
D 11
R 6
D 6
U 10
L 16
D 3
U 10
L 1
R 14
D 6
R 10
D 1
R 4
U 16
L 17
U 3
D 11
U 12
D 8
U 16
L 7
U 10
L 2
U 14
D 15
L 4
U 1
R 13
L 12
D 15
U 6
R 17
L 15
R 15
D 16
U 12
D 4
L 4
R 7
D 13
L 11
U 7
L 4
R 10
D 15
L 15
U 14
L 5
U 2
L 10
R 17
U 7
D 11
L 11
D 4
R 15
D 6
U 7
R 7
U 10
L 5
U 15
L 2
U 1
D 6
U 11
L 13
D 17
R 13
U 6
R 12
D 4
L 15
R 11
U 14
R 17
D 18
L 16
D 9
U 9
R 8
L 17
U 9
R 8
D 5
U 7
L 5
R 18
L 17
U 13
L 14
R 2
D 15
U 1
R 10
D 13
R 14
D 7
U 13
L 18
U 6
R 13
U 16
L 2
R 1
L 17
R 9
U 3
R 7
D 10
L 3
D 15
L 13
R 4
D 16
U 7
D 6
R 8
U 3
L 4
U 14
D 3
L 17
R 3
L 18
D 7
L 1
U 8
D 1
U 9
L 17
U 6
L 5
R 10
L 18
U 2
D 18
U 1
D 13
U 11
R 9
U 17
D 14
U 5
R 3
U 11
D 1
L 2
R 5
U 17
R 12
U 5
D 4
U 14
D 6
U 7
L 18
D 4
R 17
D 6
U 8
R 8
L 5
R 6
L 4
R 1
U 9
R 17
U 11
L 5
R 17
L 11
D 9
L 11
D 16
R 11
D 17
L 13
D 11
L 18
R 13
L 1
D 19
L 1
U 15
D 19
U 13
L 18
U 19
R 8
U 9
L 17
R 6
L 12
R 19
D 15
R 15
U 10
D 3
L 10
D 18
U 18
R 6
U 13
R 6
D 17
R 12
D 16
R 3
D 17
U 12
D 9
R 6
U 12
L 10
U 8
D 4
U 13
R 1
U 4
L 11
D 1
U 13
D 13
L 12
D 6
U 18
L 11
D 16
R 5
D 2
U 19
R 12
U 18
L 5
R 12
L 3
U 9
R 13
L 1
U 10
R 16
L 6
U 11
L 3
R 6
U 5
R 18
U 8
R 13
D 19
R 14
U 14
R 3
D 18
L 18
U 5
L 8
U 13
R 11
U 12
D 19
L 10
R 13
D 18
R 16
L 14
D 13
U 2
D 7
U 3
L 8
R 15
D 19";
    #endregion
}

[DebuggerDisplay("({x},{y})")]
public struct Vec
{
    public bool Equals(Vec other)
    {
        return x == other.x && y == other.y;
    }

    public override bool Equals(object? obj)
    {
        return obj is Vec other && Equals(other);
    }

    public override int GetHashCode()
    {
        return HashCode.Combine(x, y);
    }

    public int x, y;
    public static Vec Zero = new Vec { x = 0, y = 0 };
    public static Vec Right = new Vec { x = 1, y = 0 };
    public static Vec Left = new Vec { x = -1, y = 0 };
    public static Vec Up = new Vec { x = 0, y = -1 };
    public static Vec Down = new Vec { x = 0, y = 1 };

    public Vec()
    {
        x = 0;
        y = 0;
    }

    public Vec(int x, int y)
    {
        this.x = x;
        this.y = y;
    }
    public Vec Normalize() => new Vec { x = Math.Sign(x), y = Math.Sign(y) };

    public static Vec operator +(Vec a, Vec b)
        => new Vec { x = a.x + b.x, y = a.y + b.y };
    public static Vec operator -(Vec a, Vec b)
        => new Vec { x = a.x - b.x, y = a.y - b.y };
    public static Vec operator *(Vec a, int s)
        => new Vec { x = a.x *s, y = a.y * s};

    public static bool operator ==(Vec a, Vec b)
        => a.x == b.x && a.y == b.y;
    
    public static bool operator !=(Vec a, Vec b)
        => a.x != b.x || a.y != b.y;
}